#####Environment Details#########

VPC  -   Lab VPC Created

Command Host --- CLI --- Adminster Task

Processor Host --- Target Host  ---- Attach IAM Profile/Role called S3BucketAccess

S3 Bucket --- Create BUcket using Management Console   


Objective: To optimize both maintenance and cost, we recommend that you monitor the number of snapshots stored for each instance and routinely delete old snapshots that you no longer need


#### Create Snapshot EBS Volume attached to Processor Host###

#### Need details of Volume Id###

aws ec2 describe-instances --filter 'Name=tag:Name,Values=Processor'

aws ec2 describe-instances --filter 'Name=tag:Name,Values=Processor' --query 'Reservations[0].Instances[0].BlockDeviceMappings[0].Ebs.{VolumeId:VolumeId}'

#### To Create Snapshot Recommended Practice isto Shutdown Sysste###

Gather Processor Host InstanceId

aws ec2 describe-instances --filters 'Name=tag:Name,Values=Processor' --query 'Reservations[0].Instances[0].InstanceId'

aws ec2 stop-instances --instance-ids INSTANCE-ID

aws ec2 wait instance-stopped --instance-id INSTANCE-ID


####Create Snapshot###

aws ec2 create-snapshot --volume-id VOLUME-ID

aws ec2 wait snapshot-completed --snapshot-id SNAPSHOT-ID


####Restart Processor Instance###

aws ec2 start-instances --instance-ids INSTANCE-ID

aws ec2 wait instance-running --instance-id INSTANCE-ID


###Schedule Creation of Subsequent Snapshots#####

echo "* * * * *  aws ec2 create-snapshot --volume-id VOLUME-ID >> /tmp/cronlog 2>&1" > cronjob

crontab cronjob

aws ec2 describe-snapshots --filters "Name=volume-id,Values=<volume-id>"



#####Retaining Only Last Two EBS Volume Snapshots##########

###stop previous cronjob###

crontab -r

more snapshotter_v2.py

####Command to check number of snapshots taken on ebs volume ####

aws ec2 describe-snapshots --filters "Name=volume-id, Values=VOLUME-ID" --query 'Snapshots[*].SnapshotId'

python3 snapshotter_v2.py

aws ec2 describe-snapshots --filters "Name=volume-id, Values=<volume-id>" --query 'Snapshots[*].SnapshotId'


####Synchronize files between instance folder and S3 Bucket########

wget https://aws-tc-largeobjects.s3-us-west-2.amazonaws.com/CUR-TF-200-RESOPS/lab5vocareum/files.zip

Activate versioning for your Amazon S3 bucket.
Use a single AWS CLI command to synchronize (sync) the contents of your unzipped folder with your Amazon S3 bucket.
Modify the command so that it deletes a file from Amazon S3 when the corresponding file is deleted locally on your instance.
Recover the deleted file from Amazon S3 using versioning.

####Enable Bucket Versioning#########

aws s3api put-bucket-versioning     --bucket s3-bucket-name-sree     --versioning-configuration Status=Enabled


#######Sync local folder to S3 Bucket#####

aws s3 sync files s3://s3-bucket-name-sree 

###Modify the command so that it deletes a file from Amazon S3 when the corresponding file is deleted locally on your instance.####
rm -rf files/file1.txt
aws s3 sync files s3://s3-bucket-name-sree --delete

####Recover the deleted file from Amazon S3 using versioning.#########

aws s3api list-object-versions --bucket S3-BUCKET-NAME --prefix files/file1.txt

sudo aws s3api get-object --bucket s3-bucket-name-sree  --key file1.txt --version-id aN_P3nklprxtrWEeOqhD1kqGQQmA_iy3 file1.txt


@version_id ::delete marker version_id





